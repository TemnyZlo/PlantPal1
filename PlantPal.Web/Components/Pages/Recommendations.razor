@page "/recommendations"
@using PlantPal.Shared.DTOs
@using PlantPal.Shared.Models
@inject PlantPal.Web.Services.ApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Plant Recommendations - PlantPal</PageTitle>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-plant-green-600 mb-6">Plant Recommendations for Your Garden</h1>
    
    <!-- Garden Information Form -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold mb-4">Tell us about your garden</h2>
        <EditForm Model="@recommendationRequest" OnValidSubmit="@GetRecommendations">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Soil Type</label>
                    <InputSelect @bind-Value="recommendationRequest.SoilType" class="w-full p-2 border border-gray-300 rounded-md focus:ring-plant-green-500 focus:border-plant-green-500">
                        <option value="">Select soil type</option>
                        <option value="clay">Clay</option>
                        <option value="sandy">Sandy</option>
                        <option value="loam">Loam</option>
                        <option value="rocky">Rocky</option>
                        <option value="well-drained">Well-drained</option>
                    </InputSelect>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Sun Exposure</label>
                    <InputSelect @bind-Value="recommendationRequest.SunExposure" class="w-full p-2 border border-gray-300 rounded-md focus:ring-plant-green-500 focus:border-plant-green-500">
                        <option value="">Select sun exposure</option>
                        <option value="full-sun">Full Sun</option>
                        <option value="partial-sun">Partial Sun</option>
                        <option value="partial-shade">Partial Shade</option>
                        <option value="shade">Shade</option>
                    </InputSelect>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Garden Size (sq meters)</label>
                    <InputNumber @bind-Value="recommendationRequest.GardenSize" class="w-full p-2 border border-gray-300 rounded-md focus:ring-plant-green-500 focus:border-plant-green-500" placeholder="Optional" />
                </div>
            </div>
            
            <div class="flex items-center space-x-4">
                <button type="submit" class="bg-plant-green-600 text-white px-6 py-2 rounded-md hover:bg-plant-green-700 transition-colors" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Getting Recommendations...</span>
                    }
                    else
                    {
                        <span>Get Recommendations</span>
                    }
                </button>
                
                <button type="button" @onclick="GetUserLocation" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                    üìç Use My Location
                </button>
            </div>
            
            @if (!string.IsNullOrEmpty(locationStatus))
            {
                <p class="mt-2 text-sm text-gray-600">@locationStatus</p>
            }
        </EditForm>
    </div>

    <!-- Recommendations Results -->
    @if (recommendations.Any())
    {
        <div class="mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">
                Recommended Plants for Your Garden
                <span class="text-sm font-normal text-gray-600">(@recommendations.Count results)</span>
            </h2>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var recommendation in recommendations)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                    <div class="relative">
                        <img src="@(recommendation.Plant.ImageUrl ?? "/images/placeholder-plant.jpg")" 
                             alt="@recommendation.Plant.CommonName" 
                             class="w-full h-48 object-cover">
                        <div class="absolute top-2 right-2 bg-plant-green-600 text-white px-2 py-1 rounded-full text-sm font-semibold">
                            @($"{recommendation.CompatibilityScore:F0}% Match")
                        </div>
                        @if (recommendation.Plant.IsNative)
                        {
                            <div class="absolute top-2 left-2 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                                üåø Native
                            </div>
                        }
                    </div>
                    
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-gray-800 mb-1">@recommendation.Plant.CommonName</h3>
                        <p class="text-sm text-gray-600 mb-2 italic">@recommendation.Plant.ScientificName</p>
                        
                        <div class="mb-3">
                            <p class="text-sm text-gray-700 font-medium mb-1">Why it's recommended:</p>
                            <p class="text-sm text-gray-600">@recommendation.Reason</p>
                        </div>
                        
                        <div class="flex flex-wrap gap-1 mb-3">
                            @if (!string.IsNullOrEmpty(recommendation.Plant.WaterRequirements))
                            {
                                <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">üíß @recommendation.Plant.WaterRequirements</span>
                            }
                            @if (!string.IsNullOrEmpty(recommendation.Plant.SunRequirements))
                            {
                                <span class="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">‚òÄÔ∏è @recommendation.Plant.SunRequirements</span>
                            }
                            @if (!string.IsNullOrEmpty(recommendation.Plant.BloomingSeason))
                            {
                                <span class="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded">üå∏ @recommendation.Plant.BloomingSeason</span>
                            }
                        </div>
                        
                        @if (recommendation.CareAdvice.Any())
                        {
                            <div class="mb-3">
                                <p class="text-sm text-gray-700 font-medium mb-1">Care Tips:</p>
                                <ul class="text-xs text-gray-600 space-y-1">
                                    @foreach (var advice in recommendation.CareAdvice.Take(2))
                                    {
                                        <li>‚Ä¢ @advice</li>
                                    }
                                </ul>
                            </div>
                        }
                        
                        <button class="w-full bg-plant-green-600 text-white py-2 rounded-md hover:bg-plant-green-700 transition-colors text-sm font-medium">
                            Learn More
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else if (hasSearched && !isLoading)
    {
        <div class="text-center py-12">
            <div class="text-6xl mb-4">üå±</div>
            <h3 class="text-xl font-semibold text-gray-800 mb-2">No recommendations yet</h3>
            <p class="text-gray-600">Fill out the form above to get personalized plant recommendations for your garden.</p>
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-plant-green-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Finding the perfect plants for your garden...</p>
        </div>
    }
</div>

@code {
    private PlantRecommendationRequest recommendationRequest = new();
    private List<PlantRecommendationDto> recommendations = new();
    private bool isLoading = false;
    private bool hasSearched = false;
    private string locationStatus = "";

    protected override async Task OnInitializedAsync()
    {
        // Initialize with default location (you could get this from user preferences)
        recommendationRequest.Location = new LocationDto
        {
            Latitude = 40.7128, // Default to New York
            Longitude = -74.0060,
            City = "New York",
            State = "NY",
            Country = "USA"
        };
    }

    private async Task GetUserLocation()
    {
        try
        {
            locationStatus = "Getting your location...";
            StateHasChanged();
            
            var position = await JSRuntime.InvokeAsync<GeolocationPosition>("getLocation");
            recommendationRequest.Location = new LocationDto
            {
                Latitude = position.Coords.Latitude,
                Longitude = position.Coords.Longitude
            };
            
            locationStatus = $"Location found: {position.Coords.Latitude:F2}, {position.Coords.Longitude:F2}";
        }
        catch (Exception)
        {
            locationStatus = "Could not get location. Using default location.";
        }
        
        StateHasChanged();
    }

    private async Task GetRecommendations()
    {
        if (recommendationRequest.Location == null)
        {
            await GetUserLocation();
        }
        
        isLoading = true;
        hasSearched = true;
        StateHasChanged();
        
        try
        {
            recommendations = await ApiService.GetPlantRecommendationsAsync(recommendationRequest);
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error getting recommendations: {ex.Message}");
            recommendations = new List<PlantRecommendationDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class GeolocationPosition
    {
        public GeolocationCoords Coords { get; set; } = new();
    }

    public class GeolocationCoords
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}